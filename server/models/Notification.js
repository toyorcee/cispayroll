import mongoose from "mongoose";

// Define notification types directly in the model
const NOTIFICATION_TYPES = {
  PAYROLL_CREATED: "PAYROLL_CREATED",
  PAYROLL_SUBMITTED: "PAYROLL_SUBMITTED",
  PAYROLL_APPROVED: "PAYROLL_APPROVED",
  PAYROLL_REJECTED: "PAYROLL_REJECTED",
  PAYROLL_PAID: "PAYROLL_PAID",
  BANK_DETAILS_REQUIRED: "BANK_DETAILS_REQUIRED",
  DEPARTMENT_PAYROLL_APPROVED: "DEPARTMENT_PAYROLL_APPROVED",
  DEPARTMENT_PAYROLL_REJECTED: "DEPARTMENT_PAYROLL_REJECTED",
  DEPARTMENT_PAYROLL_REJECTION_STARTED: "DEPARTMENT_PAYROLL_REJECTION_STARTED",
  DEPARTMENT_PAYROLL_REJECTION_SUMMARY: "DEPARTMENT_PAYROLL_REJECTION_SUMMARY",
  PAYROLL_DRAFT_CREATED: "PAYROLL_DRAFT_CREATED",
  PAYROLL_DRAFT_UPDATED: "PAYROLL_DRAFT_UPDATED",
  PAYROLL_DRAFT_DELETED: "PAYROLL_DRAFT_DELETED",
  PAYROLL_DRAFT_SUBMITTED: "PAYROLL_DRAFT_SUBMITTED",
  PAYROLL_DRAFT_APPROVED: "PAYROLL_DRAFT_APPROVED",
  PAYROLL_DRAFT_REJECTED: "PAYROLL_DRAFT_REJECTED",
  PAYROLL_ERROR_VALIDATION: "PAYROLL_ERROR_VALIDATION",
  PAYROLL_ERROR_PROCESSING: "PAYROLL_ERROR_PROCESSING",
  PAYROLL_ERROR_SYSTEM_ERROR: "PAYROLL_ERROR_SYSTEM_ERROR",
  PAYROLL_COMPLETED: "PAYROLL_COMPLETED",
  BULK_PAYROLL_PROCESSED: "BULK_PAYROLL_PROCESSED",
  PAYMENT_FAILED: "PAYMENT_FAILED",
  PAYMENT_CANCELLED: "PAYMENT_CANCELLED",
  PAYMENT_ARCHIVED: "PAYMENT_ARCHIVED",
  PAYROLL_PENDING_APPROVAL: "PAYROLL_PENDING_APPROVAL",
  PAYROLL_PENDING_PAYMENT: "PAYROLL_PENDING_PAYMENT",
  LEAVE_REQUESTED: "LEAVE_REQUESTED",
  LEAVE_REQUESTED_INFO: "LEAVE_REQUESTED_INFO",
  LEAVE_APPROVED: "LEAVE_APPROVED",
  LEAVE_REJECTED: "LEAVE_REJECTED",
  LEAVE_HR_APPROVED: "LEAVE_HR_APPROVED",
  LEAVE_HR_REJECTED: "LEAVE_HR_REJECTED",
  LEAVE_PENDING_HR_APPROVAL: "LEAVE_PENDING_HR_APPROVAL",
  LEAVE_CANCELLED: "LEAVE_CANCELLED",
  // ALLOWANCE_REQUESTED: "ALLOWANCE_REQUESTED",
  // ALLOWANCE_APPROVED: "ALLOWANCE_APPROVED",
  // ALLOWANCE_REJECTED: "ALLOWANCE_REJECTED",
  // ALLOWANCE_PENDING_APPROVAL: "ALLOWANCE_PENDING_APPROVAL",
};

const notificationSchema = new mongoose.Schema({
  recipient: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  type: {
    type: String,
    required: true,
    enum: Object.values(NOTIFICATION_TYPES),
  },
  title: {
    type: String,
    required: true,
  },
  message: {
    type: String,
    required: true,
  },
  data: {
    type: mongoose.Schema.Types.Mixed,
  },
  read: {
    type: Boolean,
    default: false,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

// Index for faster queries
notificationSchema.index({ recipient: 1, createdAt: -1 });
notificationSchema.index({ read: 1 });

const Notification = mongoose.model("Notification", notificationSchema);

export { NOTIFICATION_TYPES };
export default Notification;
